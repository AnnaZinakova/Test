{
	"info": {
		"_postman_id": "0b42adb6-605a-4576-a8ae-21bfd689ff9c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status is 200\r",
							"pm.test(\"status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"status code is 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var res = JSON.parse(responseBody);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name response = name request\", function () {\r",
							"    pm.expect(res.name).to.eql(\"Oleg\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age response = name request\", function(){\r",
							"    pm.expect(res.age).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary response = salary request\", function(){\r",
							"    pm.expect(res.salary).to.eql(1200);\r",
							"});\r",
							"\r",
							"//Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response = name request\", function () {\r",
							"    pm.expect(res.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age response = name request\", function(){\r",
							"    pm.expect(res.age).to.eql(req.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary response = salary request\", function(){\r",
							"    pm.expect(res.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(res.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request\r",
							"pm.test(\"salary response = salary request\", function(){\r",
							"    pm.expect(res.family.u_salary_1_5_year).to.eql(req.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Oleg",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1200",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json\r",
							"var res = JSON.parse(responseBody);\r",
							"\r",
							"//Спарсить request\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response=name request\", function(){\r",
							"    pm.expect(res.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age response = age request\", function(){\r",
							"    pm.expect(res.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary response = salary request\", function(){\r",
							"    pm.expect(res.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							" console.log(res.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"var dog = res.family.pets.dog;\r",
							"pm.test(\"dog have param 'name'\", function(){\r",
							"    pm.expect(dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"dog have param'age'\", function(){\r",
							"    pm.expect(dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name is 'Luky'\", function(){\r",
							"    pm.expect(dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"age is 4\", function(){\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Max&age=25&salary=600",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Max"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var res = JSON.parse(responseBody);\r",
							"\r",
							"//Спарсить request\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response = name request\", function(){\r",
							"    pm.expect(res.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age response = age request\", function(){\r",
							"    pm.expect(res.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log(res.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(res.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(res.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(res.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] = salary request\", function(){\r",
							"    pm.expect(res.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] = salary request\", function(){\r",
							"    pm.expect(+res.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] = salary request\", function(){\r",
							"    pm.expect(+res.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"//Создать в окружении переменную age\r",
							"//Создать в окружении переменную salary\r",
							"//топаем в enviroments и создаем переменные\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\",res.name);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\",res.age);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",res.salary[0]);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (i of res.salary){\r",
							"    console.log(i);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Kate&age=19&salary=450",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "19"
						},
						{
							"key": "salary",
							"value": "450"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							" var res = JSON.parse(responseBody);\r",
							"\r",
							" //7. Спарсить request.\r",
							" var req = request.data;\r",
							" \r",
							" //Проверить, что json response имеет параметр start_qa_salary\r",
							" pm.test(\"response have 'start_qa_salary'\", function(){\r",
							"     pm.expect(res).to.have.property(\"start_qa_salary\");\r",
							" });\r",
							"\r",
							" //9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response have 'qa_salary_after_6_months'\", function(){\r",
							"     pm.expect(res).to.have.property(\"qa_salary_after_6_months\");\r",
							" });\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response have 'qa_salary_after_12_months'\", function(){\r",
							"     pm.expect(res).to.have.property(\"qa_salary_after_12_months\");\r",
							" });\r",
							"\r",
							" //11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response have 'qa_salary_after_1.5_year'\", function(){\r",
							"     pm.expect(res).to.have.property(\"qa_salary_after_1.5_year\");\r",
							" });\r",
							"\r",
							" //12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							" pm.test(\"response have 'qa_salary_after_3.5_years'\", function(){\r",
							"     pm.expect(res).to.have.property(\"qa_salary_after_3.5_years\");\r",
							" });\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"response have 'person'\", function(){\r",
							"     pm.expect(res).to.have.property(\"person\");\r",
							" });\r",
							"\r",
							" //Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							" pm.test(\"start_qa_salary = salary request\", function(){\r",
							"     pm.expect(res.start_qa_salary).to.eql(+req.salary);\r",
							" });\r",
							"\r",
							" //15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_6_months = salary*2\", function(){\r",
							"     pm.expect(res.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							" });\r",
							"\r",
							" //16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_12_months = salary*2.7\", function(){\r",
							"     pm.expect(res.qa_salary_after_12_months).to.eql(+req.salary*2.7)\r",
							" });\r",
							"\r",
							" //17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function(){\r",
							"    pm.expect(res['qa_salary_after_1.5_year']).to.eql(req.salary*3.3)\r",
							"});\r",
							" \r",
							" //18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function(){\r",
							"   pm.expect(res['qa_salary_after_3.5_years']).to.eql(req.salary*3.8)\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request(salary забрать из request.)\r",
							"pm.test(\"salary person  = salary\", function(){\r",
							"    pm.expect(res.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age person  = salary\", function(){\r",
							"    pm.expect(res.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function(){\r",
							"    pm.expect(res.person.u_salary_5_years).to.eql(req.salary*4.2)\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"//res = \"*\";\r",
							"//let arr = [\"black\", \"blue\", \"yellow\", \"orange\"];\r",
							"//for (let d = 0; d < arr.length; d++) {\r",
							" // res = arr[d].toUpperCase();\r",
							" // console.log(res);\r",
							"//}\r",
							";\r",
							"\r",
							"\r",
							"for (var key in res.person) {\r",
							"  console.log(res.person[key])\r",
							"} ;\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Roman",
							"disabled": true
						},
						{
							"key": "age",
							"value": "47",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}